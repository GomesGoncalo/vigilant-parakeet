name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  shellcheck:
    name: ShellCheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure ShellCheck installed
        run: |
          set -euo pipefail
          if command -v shellcheck >/dev/null 2>&1; then
            echo "shellcheck already installed: $(shellcheck --version | head -n1)"
          else
            echo "shellcheck not found, installing via apt"
            sudo apt-get update
            sudo apt-get install -y shellcheck
          fi

      - name: Run ShellCheck over shell scripts
        run: |
          set -euo pipefail
          # collect all tracked shell scripts recursively, NUL-separated to be safe
          files=$(git ls-files -- "*.sh" -z || true)
          if [ -z "$files" ]; then
            echo "No shell scripts found to lint"
            exit 0
          fi
          echo "Running shellcheck on tracked .sh files"
          # Use xargs -0 to handle arbitrary filenames
          # run ShellCheck and also write checkstyle XML for reviewdog
          printf '%s' "$files" | xargs -0 shellcheck -x --severity=error -f checkstyle > shellcheck-checkstyle.xml || true

      - name: Install reviewdog
        run: |
          set -euo pipefail
          if command -v reviewdog >/dev/null 2>&1; then
            echo "reviewdog already installed"
          else
            # install via official release script
            curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b /usr/local/bin v0.13.0
          fi

      - name: Post ShellCheck findings with reviewdog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          if [ ! -f shellcheck-checkstyle.xml ]; then
            echo "No ShellCheck report to post"
            exit 0
          fi
          reviewdog -f=checkstyle -name="shellcheck" -reporter=github-pr-review -level=error < shellcheck-checkstyle.xml || true

  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: fmt
        run: cargo fmt --all -- --check
        timeout-minutes: 5

      - name: clippy
        run: cargo clippy --workspace --all-targets -- -D warnings
        timeout-minutes: 10

      - name: Build
        run: cargo build --workspace --locked
        timeout-minutes: 15

      - name: Test
        run: cargo test --workspace --features test_helpers --locked
        timeout-minutes: 10

  pages-build:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin --locked
        timeout-minutes: 20

      - name: Run coverage (libs only)
        id: covrun
        env:
          RUSTFLAGS: "-C debuginfo=2"
        run: |
          set -euo pipefail
          mkdir -p ./target/tarpaulin
          # Single tarpaulin run over library crates with helpers enabled; ignore doctests and only run unit/integration tests
          cargo tarpaulin \
            -p common -p node_lib -p obu_lib -p rsu_lib \
            --features test_helpers \
            --out Lcov \
            --timeout 120 \
            --run-types Tests \
            --ignore-tests \
            --output-dir ./target/tarpaulin || true

          # Use generated lcov.info for percentage calc
          if [ ! -f ./target/tarpaulin/lcov.info ]; then echo "lcov.info not found"; exit 1; fi
          TOTAL_LF=$(grep -h ^LF: ./target/tarpaulin/lcov.info | awk -F: '{s+=$2} END {print s+0}')
          TOTAL_LH=$(grep -h ^LH: ./target/tarpaulin/lcov.info | awk -F: '{s+=$2} END {print s+0}')
          PCT=0.0
          if [ "$TOTAL_LF" -gt 0 ]; then PCT=$(awk "BEGIN { printf \"%.1f\", ($TOTAL_LH/$TOTAL_LF)*100 }"); fi
          echo "pct=$PCT" >> $GITHUB_OUTPUT
        timeout-minutes: 30
      - name: Generate coverage JSON for Shields.io
        run: |
          mkdir -p public/badges
          cat > public/badges/coverage.json <<EOF
          {"schemaVersion":1,"label":"coverage","message":"${{ steps.covrun.outputs.pct }}%","color":"blue"}
          EOF

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy-pages:
    needs: pages-build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
